import React, { useState } from 'react';
import { Upload, AlertCircle, FileText, Send, Image } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

const DetectorInterface = () => {
  const [prompt, setPrompt] = useState('');
  const [file, setFile] = useState(null);
  const [analysis, setAnalysis] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const analyzePrompt = async () => {
    try {
      setLoading(true);
      const response = await fetch('/analyze/text', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: prompt })
      });
      const result = await response.json();
      setAnalysis(result);
    } catch (err) {
      setError('Failed to analyze prompt');
    } finally {
      setLoading(false);
    }
  };

  const analyzeFile = async (file) => {
    try {
      setLoading(true);
      const formData = new FormData();
      formData.append('file', file);
      
      const response = await fetch('/analyze/file', {
        method: 'POST',
        body: formData
      });
      const result = await response.json();
      setAnalysis(result);
    } catch (err) {
      setError('Failed to analyze file');
    } finally {
      setLoading(false);
    }
  };

  const handleFileChange = (e) => {
    if (e.target.files[0]) {
      setFile(e.target.files[0]);
      analyzeFile(e.target.files[0]);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h1 className="text-2xl font-bold mb-4">Prompt Injection Detector</h1>
        
        {/* Text Input Section */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-2">
            Enter text to analyze
          </label>
          <div className="flex gap-2">
            <textarea
              className="w-full p-2 border rounded-md"
              rows="4"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="Enter your prompt here..."
            />
            <button
              onClick={analyzePrompt}
              disabled={loading || !prompt}
              className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 disabled:bg-gray-300"
            >
              <Send className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* File Upload Section */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-2">
            Or upload a file (PDF/Image)
          </label>
          <div className="border-2 border-dashed rounded-md p-4 text-center">
            <input
              type="file"
              onChange={handleFileChange}
              accept=".pdf,.png,.jpg,.jpeg"
              className="hidden"
              id="file-upload"
            />
            <label
              htmlFor="file-upload"
              className="cursor-pointer flex flex-col items-center"
            >
              <Upload className="w-8 h-8 mb-2 text-gray-500" />
              <span className="text-sm text-gray-500">
                Click to upload or drag and drop
              </span>
              <span className="text-xs text-gray-400">
                PDF, PNG, JPG files supported
              </span>
            </label>
          </div>
        </div>

        {/* Error Display */}
        {error && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Analysis Results */}
        {analysis && (
          <div className="border rounded-md p-4">
            <h2 className="text-xl font-semibold mb-4">Analysis Results</h2>
            
            {/* Risk Score */}
            <div className="mb-4">
              <h3 className="font-medium mb-2">Risk Assessment</h3>
              <div className="w-full bg-gray-200 rounded-full h-2.5">
                <div
                  className={`h-2.5 rounded-full ${
                    analysis.risk_score > 0.7
                      ? 'bg-red-500'
                      : analysis.risk_score > 0.4
                      ? 'bg-yellow-500'
                      : 'bg-green-500'
                  }`}
                  style={{ width: `${analysis.risk_score * 100}%` }}
                />
              </div>
              <span className="text-sm text-gray-600 mt-1">
                Risk Score: {(analysis.risk_score * 100).toFixed(1)}%
              </span>
            </div>

            {/* Detailed Analysis */}
            <div className="space-y-4">
              {analysis.analysis?.map((factor, index) => (
                <div
                  key={index}
                  className={`p-3 rounded-md ${
                    factor.severity === 'high'
                      ? 'bg-red-50'
                      : factor.severity === 'medium'
                      ? 'bg-yellow-50'
                      : 'bg-green-50'
                  }`}
                >
                  <div className="flex items-start gap-2">
                    <AlertCircle className={`w-5 h-5 ${
                      factor.severity === 'high'
                        ? 'text-red-500'
                        : factor.severity === 'medium'
                        ? 'text-yellow-500'
                        : 'text-green-500'
                    }`} />
                    <div>
                      <h4 className="font-medium">{factor.type}</h4>
                      <p className="text-sm text-gray-600">{factor.details}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* File-specific Information */}
            {analysis.metadata && (
              <div className="mt-4 p-4 bg-gray-50 rounded-md">
                <h3 className="font-medium mb-2">File Information</h3>
                <div className="space-y-2 text-sm">
                  {Object.entries(analysis.metadata).map(([key, value]) => (
                    <div key={key} className="flex gap-2">
                      <span className="font-medium">{key}:</span>
                      <span>{value}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default DetectorInterface;