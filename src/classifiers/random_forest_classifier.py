import logging 
from typing import Dict, Tuple, List
from src.classifiers.base_classifier import BaseClassifier
from sklearn.ensemble import RandomForestClassifier as SklearnRF
from sklearn.preprocessing import StandardScaler
import numpy as np

class RandomForestClassifier(BaseClassifier):
    """Random Forest-based classifier implementation"""
    
    def __init__(self):
        logging.info("Initializing Random Forest classifier")
        self.model = SklearnRF(
            n_estimators=100,
            class_weight='balanced',
            random_state=42
        )
        self.scaler = StandardScaler()
        # Include 'text' in feature names but don't use it for RF
        self.feature_names = [
            'text', 
            'role_manipulation_score',
            'context_manipulation_score',
            'delimiter_score',
            'emotional_manipulation',
            'hidden_chars_present',
            'repetition_score',
            'text_structure',
            'token_count'
        ]
        # Separate list for features actually used by RF
        self.rf_feature_names = [
            'role_manipulation_score',
            'context_manipulation_score',
            'delimiter_score',
            'emotional_manipulation',
            'hidden_chars_present',
            'repetition_score',
            'text_structure',
            'token_count'
        ]

    def fit(self, features: List[Dict], labels: List[int]):
        """
        Train the Random Forest model.
        
        Args:
            features: List of feature dictionaries including text
            labels: List of binary labels (0 = benign, 1 = malicious)
        """
        logging.info("Training Random Forest model...")
        
        # Convert dictionary features to numpy array, excluding text
        X = np.array([[
            features[i][fname] for fname in self.rf_feature_names
        ] for i in range(len(features))])
        y = np.array(labels)
        
        # Scale features
        X_scaled = self.scaler.fit_transform(X)
        
        # Train the model
        self.model.fit(X_scaled, y)
        logging.info("Random Forest model training completed")
    
    def predict(self, features: Dict) -> Tuple[float, str]:
        """
        Predict using Random Forest model.
        
        Args:
            features (Dict): Input features dictionary including text
            
        Returns:
            Tuple[float, str]: (risk_score, prediction)
        """
        logging.info("Making Random Forest prediction")
        
        # Convert single feature dictionary to numpy array, excluding text
        X = np.array([[features[fname] for fname in self.rf_feature_names]])
        
        # Scale features using the same scaler from training
        X_scaled = self.scaler.transform(X)
        
        # Get prediction probability for malicious class
        risk_score = self.model.predict_proba(X_scaled)[0][1]
        
        # Convert to binary prediction
        prediction = "malicious" if risk_score > 0.5 else "benign"
        
        logging.info(f"Prediction: {prediction} with risk score: {risk_score:.4f}")
        return risk_score, prediction