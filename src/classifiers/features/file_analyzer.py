# src/detector/file_analyzer.py
from typing import Dict, Union, BinaryIO
import PyPDF2
import pytesseract
from PIL import Image
import fitz  # PyMuPDF
import numpy as np
from .feature_extractor import FeatureExtractor

class FileAnalyzer:
    def __init__(self):
        self.feature_extractor = FeatureExtractor()
        
    def analyze_file(self, file: BinaryIO, filename: str) -> Dict:
        """
        Analyze uploaded file for potential prompt injections
        """
        file_type = self._get_file_type(filename)
        
        if file_type == "pdf":
            return self._analyze_pdf(file)
        elif file_type in ["jpg", "jpeg", "png"]:
            return self._analyze_image(file)
        else:
            raise ValueError(f"Unsupported file type: {file_type}")

    def _get_file_type(self, filename: str) -> str:
        """Get file extension"""
        return filename.lower().split('.')[-1]

    def _analyze_pdf(self, file: BinaryIO) -> Dict:
        """
        Extract and analyze text from PDF for prompt injections
        """
        try:
            # Use PyMuPDF for better text extraction
            pdf_document = fitz.open(stream=file.read(), filetype="pdf")
            text_content = ""
            hidden_content = []
            metadata = {}
            
            # Extract text and analyze each page
            for page_num in range(pdf_document.page_count):
                page = pdf_document[page_num]
                
                # Get visible text
                text_content += page.get_text()
                
                # Check for hidden text
                hidden = page.get_textpage().extractDICT()
                if hidden['blocks'] != []:
                    for block in hidden['blocks']:
                        if block.get('invisible'):
                            hidden_content.append(block['text'])
                
                # Check for JavaScript
                for annot in page.annots():
                    if annot.type[1] == 'Widget':
                        js = annot.widget.get_js()
                        if js:
                            hidden_content.append(f"JavaScript found: {js}")

            # Extract metadata
            metadata = pdf_document.metadata
            
            # Analyze content
            analysis_result = self.feature_extractor.extract_features(text_content)
            
            # Add PDF-specific analysis
            analysis_result.update({
                "has_hidden_content": len(hidden_content) > 0,
                "hidden_content": hidden_content,
                "metadata": metadata,
                "pdf_structure": self._analyze_pdf_structure(pdf_document)
            })
            
            return analysis_result
            
        except Exception as e:
            return {"error": f"PDF analysis failed: {str(e)}"}

    def _analyze_pdf_structure(self, pdf_document) -> Dict:
        """
        Analyze PDF structure for suspicious elements
        """
        return {
            "page_count": pdf_document.page_count,
            "has_javascript": any(
                annot.type[1] == 'Widget' and annot.widget.get_js()
                for page in pdf_document
                for annot in page.annots()
            ),
            "has_embedded_files": pdf_document.embfile_count() > 0,
        }

    def _analyze_image(self, file: BinaryIO) -> Dict:
        """
        Extract and analyze text from image for prompt injections
        """
        try:
            # Open image with PIL
            image = Image.open(file)
            
            # Extract text using OCR
            text_content = pytesseract.image_to_string(image)
            
            # Get image metadata
            metadata = {
                "format": image.format,
                "size": image.size,
                "mode": image.mode
            }
            
            # Check for steganography
            steg_analysis = self._check_steganography(image)
            
            # Analyze extracted text
            analysis_result = self.feature_extractor.extract_features(text_content)
            
            # Add image-specific analysis
            analysis_result.update({
                "metadata": metadata,
                "steganography_detected": steg_analysis["detected"],
                "steg_confidence": steg_analysis["confidence"],
                "image_text_content": text_content
            })
            
            return analysis_result
            
        except Exception as e:
            return {"error": f"Image analysis failed: {str(e)}"}

    def _check_steganography(self, image: Image) -> Dict:
        """
        Basic steganography detection
        """
        # Convert image to numpy array
        img_array = np.array(image)
        
        if len(img_array.shape) < 3:
            return {"detected": False, "confidence": 0.0}
        
        # Check LSB patterns
        lsb = img_array & 1
        lsb_ratio = np.sum(lsb) / lsb.size
        
        # Analyze entropy in LSB
        entropy = self._calculate_entropy(lsb.flatten())
        
        return {
            "detected": entropy > 7.5 or abs(lsb_ratio - 0.5) < 0.01,
            "confidence": min(1.0, (entropy / 8.0))
        }

    def _calculate_entropy(self, data: np.ndarray) -> float:
        """
        Calculate Shannon entropy
        """
        _, counts = np.unique(data, return_counts=True)
        probabilities = counts / len(data)
        entropy = -np.sum(probabilities * np.log2(probabilities))
        return entropy

# src/app.py
from flask import Flask, request, jsonify
from injection_detector import InjectionDetector
from detector.file_analyzer import FileAnalyzer
import os

app = Flask(__name__)
ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg'}

detector = InjectionDetector()
file_analyzer = FileAnalyzer()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/analyze/text', methods=['POST'])
def analyze_text():
    if not request.json or 'text' not in request.json:
        return jsonify({'error': 'No text provided'}), 400
        
    result = detector.analyze_prompt(request.json['text'])
    return jsonify(result)

@app.route('/analyze/file', methods=['POST'])
def analyze_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file provided'}), 400
        
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400
        
    if not allowed_file(file.filename):
        return jsonify({'error': 'File type not allowed'}), 400
        
    try:
        result = file_analyzer.analyze_file(file, file.filename)
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)